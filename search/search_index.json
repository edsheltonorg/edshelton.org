{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#hi","title":"Hi.","text":"<p>Welcome to my personal site! </p> <p>It has two sections:</p> <ul> <li>The Blog <sup>(You Are Here!)</sup></li> <li>The Knowledge Base <sup>(Sections in Header.)</sup></li> </ul> <p>Dedicated to \u00a0Everyone\u00a0 who teaches me ...whether they know it or not!</p> <p>Blog Feed <sup><sup>Archive</sup></sup></p>"},{"location":"apps/vagrant/vagrant-getting-started/","title":"Getting Started","text":""},{"location":"apps/vagrant/vagrant-getting-started/#getting-started","title":"Getting Started","text":""},{"location":"apps/vagrant/vagrant/","title":"Overview","text":""},{"location":"apps/vagrant/vagrant/#vagrant","title":"Vagrant","text":"<p>Hashicorp Vagrant is a tool to quickly and consistently create VMs.</p> <p>Make a config file specifying Hypervisor, OS, and post-install - Vagrant does the rest.</p> <p></p> <p>It's great for testing software that requires a full OS instance (AKA Docker doesn't work).</p> Official Info &amp; Link Note Documentation Download License Business Source License 1.1, Originally MPL 2.0 Project Home Home"},{"location":"apps/vagrant/vagrant/#articles","title":"Articles","text":"<p>Posts all about Vagrant:</p> Readme <p>Articles recommended to start with:</p> Article Notes Getting Started"},{"location":"apps/visual-studio/visual-studio-setup-cpp/","title":"Setup C++","text":""},{"location":"apps/visual-studio/visual-studio-setup-cpp/#setup-c-for-visual-studio","title":"Setup C++ for Visual Studio","text":"<p>We're going to setup a <code>C++</code> development environment in Visual Studio.</p> <p></p>"},{"location":"apps/visual-studio/visual-studio-setup-cpp/#why","title":"Why","text":"<p>You want to develop <code>C++</code> using Visual Studio.</p> <p>Its also a very common way to begin learning <code>C++</code> since its very easy to get started!</p>"},{"location":"apps/visual-studio/visual-studio-setup-cpp/#requirements--warnings","title":"Requirements &amp; Warnings","text":"<p>A basic Windows computer is necessary with a bit of storage.</p> Requirements <ul> <li>OS: Windows (Any Version Still Supported)</li> <li>Storage: ~20GB (For Visual Studio IDE + Modules)</li> </ul> Note for non-Windows Machines <ul> <li>Visual Studio for Mac is not the same thing &amp; isn't applicable to this guide at all.</li> <li>MacOS or Linux users will need to use a different IDE or development solution.</li> </ul>"},{"location":"apps/visual-studio/visual-studio-setup-cpp/#how","title":"How","text":"<p>First, install Visual Studio.</p> <p>Next, open a blank or existing project.</p> <p><code>Tools &gt; Get Tools and Features...</code></p> <p></p> <p>Install <code>Desktop development with C++</code> (and other workloads you desire):</p> <p></p> <p>Save your work and <code>Continue</code>:</p> <p></p>"},{"location":"apps/visual-studio/visual-studio/","title":"Overview","text":""},{"location":"apps/visual-studio/visual-studio/#visual-studio","title":"Visual Studio","text":"<p>Microsoft's Free* IDE for .NET, C++, and more.</p> <p>The most common way tool to develop a C# / .NET programs:</p> <p></p> <p>An IDE such as Visual Studio is used to both develop and debug code:</p> <p></p> Official <p>Official links related to Visual Studio</p> Info &amp; Link Notes Documentation Download License Proprietary Free / Paid Community free for certain use cases."},{"location":"apps/visual-studio/visual-studio/#articles","title":"Articles","text":"<p>Posts all about Visual Studio:</p> General <p>Specific articles:</p> Article Notes C++ Setup Related Topics Topic Why .NET Overview Common Framework Target"},{"location":"blog/lets-play-full-stack-c-developer/","title":"Let's Play: Full Stack C# Developer","text":"<p>A coworker of mine in IT operations is beginning to learn how to program!</p> <p>We were discussing the most pragmatic ways to become a holistic dev,  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0I didn't have a perfect answer, but I have a gut feeling road maps are great:</p> <p></p> <p>So I will begin a quest to \"Let's Play\" (1) a road maps.</p> <ol> <li>The act of aimlessly narrating something with no end in sight!</li> </ol> <p>Let's 0-to-100 as an aspiring .NET developer, while making our own road map on the way!</p> Article Updates Date What 2023-09-20 Game Plan 2023-09-23 01. The Adventure Begins"},{"location":"blog/lets-play-full-stack-c-developer/#game-plan","title":"Game Plan","text":"<p>I'll be starting from scratch like a beginner would! (1)</p> <ol> <li>I am a systems administrator w/ strong emphasis on PowerShell &amp; Python. I will be dogfooding this strategy to ensure its appropriate for all I recommend it to.</li> </ol> Material &amp; Road Maps <p>I put this material in the basic order I'd be trying to start them.</p> <p>Some will lay incomplete before beginning the next one, but I intend to finish all.</p> Material 01: Microsoft + FreeCodeCamp Foundational C# Certification 02: C# Learning Roadmap 03: Roadmap.sh ASP.NET 04: Roadmap.sh SQL 05: Roadmap.sh PostgreSQL 06: Roadmap.sh MongoDB 07: Roadmap.sh Docker 08: Roadmap.sh Kubernetes 09: Roadmap.sh GraphQL 10: Roadmap.sh Frontend 11: Roadmap.sh UX Design 12: Roadmap.sh Design System 13: Roadmap.sh Javascript 14: Roadmap.sh Typescript 15: Roadmap.sh Node.JS 16: Roadmap.sh Frontend Performance 17: Roadmap.sh React 18: Roadmap.sh React Native 19: Roadmap.sh Code Review 20: Roadmap.sh QA 21: Roadmap.sh Backend 22: Roadmap.sh Devops 23: Roadmap.sh API Security 24: Roadmap.sh AWS Best Practices 25: Roadmap.sh CyberSecurity 26: Roadmap.sh System Design 27: Roadmap.sh Computer Science 28: Roadmap.sh Software Design Architecture <p>C# Academy will be used as self guided exams to test comprehension.</p> <p>If all goes well, the goal is to make my own roadmap.sh style map for you all!</p>"},{"location":"blog/lets-play-full-stack-c-developer/#01-the-adventure-begins","title":"01. The Adventure Begins","text":""},{"location":"blog/lets-play-full-stack-c-developer/#beginning-as-a-beginner","title":"Beginning as a Beginner","text":"<p>Did you know 99.5% of people can't program?</p> <p></p> <p>So let's jump into the mind of an anxious beginner:</p> <ul> <li>Where should I start?</li> <li>Should I jump straight into code?</li> <li>Maybe setup an IDE or text editor?</li> </ul> <p>Turns out, Microsoft and FreeCodeCamp got together to make an Intro C# Certification.</p> <p></p> <p>The first module even has a built-in coding panel, how friendly!</p> <p></p> <p>They get you into action almost right away, while explaining just a little theory.</p>"},{"location":"blog/lets-play-full-stack-c-developer/#gripes--mindset-fix","title":"Gripes &amp; Mindset Fix","text":"<p>This material is (mostly) great! It doesn't treat you like an idiot.</p> <p>However, one gripe is the occasional use of terms without definition:</p> <p></p> <p>Alluding to untaught subjects both under-explains and over-explains! \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Younger me would panic: \"I've missed something big!\"</p> <p>I find an effective strategy to stop this anxiety is to just write it down:</p> <p></p> <p>If our source doesn't do a good job answering the question, we'll just google it later! \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0I treat it like patiently asking a question after a lecture.</p>"},{"location":"blog/lets-play-full-stack-c-developer/#cheat-sheets","title":"Cheat Sheets","text":"<p>As a slightly-more-than-beginner developer, this exercise is helping me build my site!</p> <p>Anything I find useful will be added to either of these glossaries:</p> <ul> <li>.NET Glossary</li> <li>Programming Glossary</li> </ul> <p>I highly encourage you to keep a terminology cheat sheet! It helps tremendously.</p>"},{"location":"blog/lets-play-full-stack-c-developer/#rapid-experimenting","title":"Rapid Experimenting","text":"<p>God, how lucky are we to be alive in this very moment.</p> <p>Microsoft made an extension to jupyter notebooks to allow C#, F#, PowerShell, and more!</p> <p></p> <p>I Highly Recommend installing it, as it will help you visualize what's going on.</p> <p>For instance, here's an easy to follow class &amp; object assignment:</p> <p></p> <p>Now check how I can output normally &amp; via Jupyter's variable examination:</p> <p></p> <p>Take note how I didn't have to use any <code>using</code> statements or boilerplate!</p> <p>This brings my favorite feature of shell-like languages to C#: Organically Messing Around!</p> <p>The only thing I see being a thorn is the fact <code>Console.ReadLine()</code> doesn't work, rather this:</p> <p></p> <p>If I ever decide to teach, I'll have to determine how to address this if it isn't fixed.</p>"},{"location":"blog/lets-play-full-stack-c-developer/#non-windows-people-rejoice","title":"Non-Windows People Rejoice","text":"<p>Good news!</p> <p>VSCode &amp; the official C# Dev Kit extensions work on all major operating systems. (1)</p> <ol> <li>VS Codium had issues w/ the C# extension for licensing reasons, which is the same general terms as the Visual Studio EULA. This isn't FOSS at all, and you need to be cautious when using for a commercial product!</li> </ol> <p>The C# Dev Kit provides a lot of Visual Studio features to VSCode, like project creation:</p> <p></p> <p>And the Solution Explorer allows adding project files nicely.</p> <p></p> <p>Testing has a nice interface as well!</p> <p></p> <p>.NET Framework stuff is mostly stripped, but that's beyond OK!</p> <p>Let's see how far we can get w/ VSCode!</p>"},{"location":"blog/lets-play-full-stack-c-developer/#vscode-idiosyncrasies","title":"VSCode Idiosyncrasies","text":"<p>Oh geez... how will I explain this sanely?</p> <p>So, the normal debug <code>launch.json</code> and the top right debug buttons are controlled separately:</p> <p></p> <p>The top right button is controlled by the (mostly working) C# Dev Kit via the <code>settings.json</code> file.</p> <p>Basically the only annoying thing is the default behavior to use the debug console. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 It doesn't allow for the <code>Console.ReadLine()</code> to be input:</p> <p></p> <p>This can be fixed, however integratedTerminal is tricky to use until they fix it!</p> <p>As such, we'll use our preferred terminal for console apps:</p> .vscode/settings.json<pre><code>{\n    // ...\n    \"csharp.debug.console\": \"externalTerminal\", // or integratedTerminal when working nicely\n    \"debug.internalConsoleOptions\": \"neverOpen\",\n    \"debug.openDebug\": \"neverOpen\",\n}\n</code></pre> <p>Here's the external terminal in action: Note: VSCode doesn't hold the console open, so you can add this code to hold it open: <code>if (System.Diagnostics.Debugger.IsAttached) Console.ReadKey(true);</code></p> <p></p> <p>If you don't mind the debug menu focusing (or its fixed), here's the integrated terminal:</p> <p></p>"},{"location":"blog/lets-play-full-stack-c-developer/#part-1-complete","title":"Part 1 Complete!","text":"<p>Wow, that was a lot more comprehensive then I thought!</p> <p>We are introduced into types and general programming logic.</p> <p></p> <p>It also got pretty deep in <code>Console.WriteLine()</code> formatting, I learned a few things!</p> <p>With the projects, they'll let you cheat yourself if you're not careful.</p> <p></p> <p>The projects are done at the skill level they want and are great!</p> <p>The editor on the side was pretty easy to work with too.</p> <p>I will say that this is a great interactive way to get someone started from nothing. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 It will save you time in seeing if someone is serious. Usually they're not!</p>"},{"location":"blog/lets-play-full-stack-c-developer/#part-2","title":"Part 2","text":"<p>Hey, I'm glad I decided to use VSCode for this in the background.</p> <p>Our first assignment is to setup VSCode (and will be used all the way to the end). Note: The instructions are mostly Windows w/ small mentions of Linux &amp; MacOS. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 You can easily follow along, but just be aware its not dynamic based off user agent.</p> <p></p> <p>They introduce you to it very nicely as well:</p> <p></p>"},{"location":"blog/lets-play-full-stack-c-developer/#learning-to-swim","title":"Learning to Swim","text":"<p>Very shortly into part 2 does it start asking you to RTFM.</p> <p>This is excellent, they introduce where to look (that is, search engines &amp; M$ docs).</p> <p>Here's an example:</p> <p></p> <p>I initially searched \"Largest\" instead of \"Larger\" and couldn't find anything in the docs.</p> <p>So I consulted the internet, and StackOverflow introduced <code>Math.Max()</code></p> <p></p> <p>I really like that it introduces the main problem solving workflow early to the student.</p>"},{"location":"blog/pragmatism-for-the-idealistic-teacher/","title":"Pragmatism For The Idealistic Teacher","text":"<p>Wow! So much I've learned in the past few years.  <sup>...or perhaps lost due to unnecessary idealism!</sup></p> <p>Just today I was explaining to a beginner what a compiler was, and how C# used it.</p> <p>So C# is converted to CIL so it can be kind portable and it gets compiled twice so...</p> <p>After getting a blank stare, I realized I had broken the zone of proximal development:</p> <p></p> <p>When teaching beginners, fully detailed answers are harmful! Here's a fun example:</p> <p>Your inquisitive younger brother asks: \"What happens when you go to google.com?\"</p> <p></p> <p>Most would give a phony \"Oh, okay\" and then never ask you again! <sup><sup>Note: My little brother is built different so this is a bad personal example.. but you get the point!</sup></sup></p> <p>Training others IT from zero experience should be handled like planting a tree.</p> <ul> <li>They have some body of knowledge about something, teach to their strengths!</li> <li>The first few sessions are the ones that matter and should be treated as such.</li> <li>Water &amp; prune them only as needed, and watch them grow towards the sun of their spirit.</li> </ul> <p></p> <p>Remember how you didn't call Mrs. Krabappel when you calculated a tip last week?</p> <p>Make fishermen out of your peers!</p> <p>...Okay, how do we do that?</p> <p>Well, let's take my C# compilation example:</p> <p></p> <p>The pragmatic explanation tells 0 lies and provides much better context.</p> <p>Consider this war story:</p> <p>Once upon a time, I almost blew up a project because I let slip it uses Docker!</p> <p> \"...What?\" You may be asking.</p> <p>Turns out, my boss thought it was a death sentence dependency!</p> <p> \"...Why?\" You may be asking.</p> <p>Turns out, a previous IT worker couldn't figure it out &amp; told him it was unreliable!</p> <p>Keep it simple, slow it down, and listen.The more you speak the more you lose!</p>"},{"location":"blog/is-mkdocs-truly-stable/","title":"Is Mkdocs Truly Stable","text":""},{"location":"blog/is-mkdocs-truly-stable/#long-time-no-see","title":"Long Time No See!","text":"<p>This is a quick test to see if the runner I setup 2 years ago has broken.</p> <p>I cannot stand maintenance of any sort for things that shouldn't require maintenance.</p> <p>How many people think \"I should really patch my copy of Moby Dick!\"</p> <p>Take care!</p> <ul> <li>Ed</li> </ul>"},{"location":"data/concepts/Databases/","title":"Databases","text":""},{"location":"data/concepts/Databases/#databases","title":"Databases","text":"<p>Databases are organizations of data that provide access via Database Management Systems (DBMS)</p> <p>Most software stores data via a database, making it essential to understand.</p> <p></p> Implementations Topic Why Relational Databases Common Database Implementation"},{"location":"data/concepts/SQL/","title":"SQL","text":""},{"location":"data/concepts/SQL/#sql","title":"SQL","text":"<p>Structured Query Language, is a DSL made for viewing or manipulating data.</p> <p>Nearly every database uses some form of SQL (or tries to replicate its function).</p> <p></p> Good to Know <p>Topics that help in understanding:</p> Topic Why Databases Relational Databases"},{"location":"data/concepts/relational-databases/","title":"Relational Databases","text":""},{"location":"data/concepts/relational-databases/#relational-database","title":"Relational Database","text":"<p>Relational Databases Management Systems (RDBMS) are common ways to model data.</p> <p>A significant portion of programs use RDBMS as a dependency.</p> <p></p>"},{"location":"data/sql-server/sql-server/","title":"Overview","text":""},{"location":"data/sql-server/sql-server/#sql-server","title":"SQL Server","text":"<p>Microsoft's Relational Database Management System.</p> <p>It allows for efficient storage and retrieval of data.</p> <p></p> <p>Traditionally chosen for .NET projects or for legacy reasons.</p> Official <p>Official links related to SQL Server</p> Info &amp; Link Notes Documentation Download Many editions exist based on usage. License Proprietary. Pricing Cost is complex and variable!"},{"location":"dev/concepts/programming-glossary/","title":"Programming Glossary","text":""},{"location":"dev/concepts/programming-glossary/#programming-glossary","title":"Programming Glossary","text":"<p>Terminology, Lingo, and Clarification for Programming.</p>"},{"location":"dev/concepts/programming-glossary/#baseline-definitions","title":"Baseline Definitions","text":"<p>Terms you already know or can \"feel\".</p>"},{"location":"dev/concepts/programming-glossary/#programming-language","title":"Programming Language","text":"<p>Simple Definition:</p> <ul> <li>A human interface that controls computers, usually textual and with formal rules.</li> <li>Depends on who you're asking!</li> </ul>"},{"location":"dev/concepts/programming-glossary/#syntax","title":"Syntax","text":"<p>Simple Definition:</p> <ul> <li>The set of rules for character arrangement to make a valid statement in a language.</li> </ul>"},{"location":"dev/concepts/programming-glossary/#semantics","title":"Semantics","text":"<p>Simple Definition:</p> <ul> <li>The meaning of the code written.</li> <li>Something like <code>1 + 1</code> and <code>add(1, 1)</code> are semantically identical.</li> </ul>"},{"location":"dev/concepts/programming-glossary/#execution","title":"Execution","text":"<p>Things listed below are parts of how the code actually becomes something that runs.</p> <p>NOTE: All these items are subject to implementation detail beyond the most abstract answer.</p>"},{"location":"dev/concepts/programming-glossary/#compiler","title":"Compiler","text":"<p>Simple Definition:</p> <ul> <li>A program that commonly converts code to other code (usually lower).</li> <li>Sometimes refers to linking, optimizing, and other add-on features.</li> </ul>"},{"location":"dev/concepts/programming-glossary/#stack--heap","title":"Stack &amp; Heap","text":"<p>Simple What:</p> <ul> <li>How data is held in memory and used when running.</li> <li>This is a complex subject that will vary by every programming &amp; OS implementation.</li> </ul> <p>Simple Why:</p> <ul> <li>The way many popular languages split variable scope and object persistent.</li> <li>Stack variables are faster to add and remove, where as heap variables are global and shareable.</li> <li>Better explained here.</li> </ul> <p>I'll leave it to the professionals to explain this:</p>"},{"location":"dev/concepts/programming-glossary/#variable","title":"Variable","text":"<p>Simple Definition:</p> <ul> <li>A Variable is named symbol that (may) contain data.</li> </ul> <p>Simple Why:</p> <ul> <li>It allows for reuse of code and easier comprehension of our code.</li> </ul> Examples C# <p>Input: </p><pre><code>int i = 5;      // i = variable\nstring s = \"hi\" // s = variable\n</code></pre><p></p>"},{"location":"dev/concepts/programming-glossary/#literal","title":"Literal","text":"<p>Simple Definition:</p> <ul> <li>A Literal is a value that is literally itself.<ul> <li>Such as <code>\"Words\"</code>, or <code>12</code>, or <code>false</code></li> <li>Good explanation and examples of literal vs non-literal here.</li> </ul> </li> </ul> <p>Simple Why:</p> <ul> <li>Most languages have compile time advantages for values that won't change.</li> </ul> Examples C# <p>Input: </p><pre><code>int i = 5; // 5 = literal\nstring s = \"hi\" // \"hi\" = literal\n</code></pre><p></p>"},{"location":"dev/concepts/programming-glossary/#constant","title":"Constant","text":"<p>Simple Definition:</p> <ul> <li>A Constant is a Literal represented as a variable.</li> </ul> <p>Simple Why:</p> <ul> <li>Most languages have compile time advantages for values that won't change.</li> <li>Descriptively tells programmers that this value is immutable.</li> </ul> Examples C# <p>Input: </p><pre><code>const int Months = 12;  // Months are unchanging\nconst double PI = 3.14; // Pi is unchanging\n</code></pre><p></p>"},{"location":"dev/concepts/programming-glossary/#types","title":"Types","text":"<p>Simple Definition:</p> <ul> <li>A Data Type (or Type) is a classification of data which tells a language how to handle it.</li> </ul> <p>Simple Why:</p> <ul> <li>Its creates formal logic, optimization opportunities, and easier to check code.</li> <li>Learn more about why to use types here.</li> </ul> Examples C# <p>Input: </p><pre><code>int i = 5;      // int = type\nstring s = \"hi\" // string = type\n</code></pre><p></p>"},{"location":"dev/concepts/programming-glossary/#common-data-types","title":"Common Data Types","text":"<p>Simple Definition:</p> <ul> <li>Most languages have these date types (non-exhaustive):</li> </ul> Type What <code>Integers</code> -2, -1, 0, 1, 2 (Read More). <code>Floating Point</code> -2.2, -1.0, 0.0, 1.3E-12, 2E9 (Read More). <code>Boolean</code> false, true (Read More). <code>Char</code> a, A, b, !, \ud83d\ude03 (Read More). <code>Null</code> <code>Null</code>, sometimes <code>Undefined</code> or <code>Empty</code> (Read More) <code>Enum</code> <code>{LOW = 1, MEDIUM = 2, HIGH = 3}</code> (Read More) <code>Array</code> <code>[\"ford\", \"toyota\", \"dodge\"]</code> (Read More) <code>Record</code> / <code>Struct</code> <code>{string firstName, string lastName, int birthYear}</code> (Read More) <ul> <li>Depending on language or library, they also may support these (and many more):</li> </ul> Type What <code>String</code> <code>Hello</code>, <code>A sentence</code>, <code>forty-two</code> (Read More) <code>Time</code> 23:00:00.000UTC (Read More) <code>Date</code> 2023-09-27 (Read More)"},{"location":"dev/concepts/programming-glossary/#type-casting--type-conversion","title":"Type Casting / Type Conversion","text":"<p>Simple What:</p> <ul> <li>Depending on language, implicitly or explicitly converts one type to another.</li> <li>For instance, a <code>int</code> will usually automatically \"widen\" to a double.</li> </ul> <p>Simple Why:</p> <ul> <li>Sometimes you need to have a different type from data that already exists.</li> </ul> Examples C# <p>Implicit:</p> <pre><code>int myInt = 9;\ndouble myDouble = myInt; // Now we have a 9 of type double!\n</code></pre> <p>Explicit:</p> <pre><code>double myDouble = 9.78;\nint myInt = (int) myDouble;    // Notice how we define (int) since we may lose data.\nConsole.WriteLine(myDouble);   // Outputs 9.78\nConsole.WriteLine(myInt);      // Outputs 9 (!)\n</code></pre> <p>There are other ways to do these conversions, but these are the most common ways when people say \"Type Casting\"</p>"},{"location":"dev/concepts/programming-glossary/#generics","title":"Generics","text":"<p>Simple Definition:</p> <ul> <li>If the language supports it, allows the user to choose the data type instead of the method.</li> <li>This is common for comparing objects or for collections, but can also be for methods.</li> <li>Sometimes generics types can be constrained from any type to specific types.</li> </ul> <p>Simple Why:</p> <ul> <li>Allows compile time checks &amp; optimization.</li> <li>Allows for reuseable code.</li> <li>Eliminates boxing for languages the implicitly cast.</li> </ul> Examples C# <pre><code>var myIntList = new List&lt;int&gt;();\nmyIntList.Add(10);\nmyIntList.Add(\"String\");     // Error: string != int\n\nvar myStringList = new List&lt;string&gt;();\nmyStringList.Add(\"String\");\nmyStringList.Add(10);        // Error: int != string\n</code></pre>"},{"location":"dev/concepts/programming-glossary/#strings","title":"Strings","text":"<p>Strings are a very common data type.</p> <p>You'll use them</p>"},{"location":"dev/concepts/programming-glossary/#escape-characters","title":"Escape Characters","text":"<p>Simple Definition:</p> <ul> <li>An Escape Character is a special character or action represented by a symbol.</li> <li>Each language and tool has different ways of expressing the special characters.</li> </ul> <p>Simple Why:</p> <ul> <li>How does one represent a new line or the same quote character that closes the string?</li> </ul> Examples C# <p>Input: </p><pre><code>Console.WriteLine(\"Hello\\nWorld\")\n</code></pre><p></p> <p>Output: </p><pre><code>Hello\nWorld\n</code></pre><p></p> <p>Input: </p><pre><code>Console.WriteLine(\"\\\"Yay!\\\"\")\n</code></pre><p></p> <p>Output: </p><pre><code>\"Yay!\"\n</code></pre><p></p>"},{"location":"dev/concepts/programming-glossary/#common-escape-characters","title":"Common Escape Characters","text":"<p>Simple Definition:</p> <ul> <li>Most languages use C Styled Escape Characters</li> </ul> <p>This list is non-exhaustive:</p> Type What <code>\\n</code> New Line <code>\\r</code> Carriage Return (MacOS New Line / Windows <code>\\r\\n</code> New Line) <code>\\t</code> Horizontal Tab <code>\\v</code> Vertical Tab <code>\\b</code> Backspace <code>\\0</code> Null Character <code>\\\\</code> Literal \\ <code>\\'</code> Literal ' <code>\\\"</code> Literal \""},{"location":"dev/concepts/programming-glossary/#modulus","title":"Modulus","text":"<p>Simple What:</p> <ul> <li>Common way of getting remainder of number after division, represented by symbol <code>%</code>.</li> </ul> <p>Simple Why:</p> <ul> <li>Good for launching \"Once every <code>n</code> times\" operations.</li> <li>Good for determining even &amp; odd.</li> <li>Good way to create chance system in combination with a random function.</li> </ul> <p></p> Examples C# <p>Basic example:</p> <pre><code>int timeOne   = 23 % 12; // 11\nint timeTwo   = 24 % 12; // 0\nint timeThree = 25 % 12; // 1\n</code></pre> <p>Even or Odd:</p> <pre><code>if (num % 2 == 0) {\n    // even\n}\n</code></pre>"},{"location":"dev/concepts/programming-glossary/#compound-assignment-operators","title":"Compound Assignment Operators","text":"<p>Simple What:</p> <ul> <li>Operators like <code>+=</code>, <code>-=</code>, and even <code>=&gt;</code>.</li> <li>Learn about what each one does here.</li> </ul> <p>Simple Why:</p> <ul> <li>Makes reading code sometimes more elegant. This is an audience question.</li> </ul>"},{"location":"dev/concepts/programming-glossary/#increment--decrement","title":"Increment / Decrement","text":"<p>Simple What:</p> <ul> <li>Add or subtracts (or otherwise moves up/down) a variable.</li> <li>Depending on language, <code>++i</code> and <code>i++</code> have slightly different meaning.<ul> <li>If its a presentation that also impacts the variable, it will make a difference.</li> <li>NOTE: Common premature optimization, the compiler / language fixes performance / doesn't matter.</li> </ul> </li> </ul> <p>Simple Why:</p> <ul> <li>Easy way to move up and down a number.</li> <li>Useful during <code>for loops</code> or iterations.</li> </ul> Examples C# <p>Basic example:</p> <pre><code>int i = 1;\ni++;       // i = 2\n</code></pre> <p>Order difference example:</p> <pre><code>int i = 1;\nConsole.WriteLine(i++); // \"1\"; i = 2\n</code></pre> <pre><code>int i = 1;\nConsole.WriteLine(++i); // \"2\"; i = 2\n</code></pre>"},{"location":"dev/concepts/programming-glossary/#dictionary--map--key-value-collection","title":"Dictionary / Map / Key Value Collection","text":"<p>Simple What:</p> <ul> <li>Many names to describe a collection of keys and values, usually modifiable.</li> <li>Formally defined as an Associative Array.</li> <li>A Hash Map / Hash Table is an implementation of the underlying key sorting algorithm.<ul> <li>NOTE: Many languages have different underlying algorithms that fulfill the same purpose.</li> </ul> </li> </ul> <p>Simple Why:</p> <ul> <li>Lots of things need a unique identifier with information under it.<ul> <li>For instance, a student (who has a unique ID) and their overall grades.</li> </ul> </li> </ul> Examples C# <p>C# has a <code>Hashtable</code> and a preferred generic-capable <code>Dictionary</code>.</p> <p>Dictionary accepts nearly any type for both <code>&lt;Key, Value&gt;</code>.</p> <p>Student example:</p> <pre><code>using System.Collections.Generic;\n\nvar grades = new Dictionary&lt;string, List&lt;int&gt;&gt;();\ngrades.Add(\"Ed\",       new List&lt;int&gt; {93, 87, 98, 95, 10});\ngrades.Add(\"Deadbeef\", new List&lt;int&gt; {80, 83, 82, 88, 85});\ngrades.Add(\"Cafe\",     new List&lt;int&gt; {84, 96, 73, 85, 79});\n</code></pre> <p>You may also initialize it with data a few different ways.</p> <pre><code>var grades = new Dictionary&lt;string, List&lt;int&gt;&gt;\n{\n    {\"Ed\",         new List&lt;int&gt; {93, 87, 98, 95, 10}},\n    {\"Deadbeef\",   new List&lt;int&gt; {80, 83, 82, 88, 85}}\n};\n// ... You can still add them later normally\ngrades.Add(\"Cafe\", new List&lt;int&gt; {84, 96, 73, 85, 79});\n</code></pre>"},{"location":"dev/concepts/programming-glossary/#stateful--stateless-code","title":"Stateful / Stateless Code","text":"<p>Simple What:</p> <ul> <li>Stateful code stores information about itself that can be recalled later.</li> <li>Stateless code works regardless and consistently without memory of the past.</li> <li>Good answers here.</li> </ul> <p>Simple Why:</p> <ul> <li>This is the nature of code. Either it is or isn't.</li> <li>Stateless code is usually preferred because it enables more consistent and parallel code..</li> <li>State is almost always unavoidable however, or preferred!</li> </ul> Examples C# <p>Stateless:</p> <pre><code>void addTwo(int a, int b)\n{\n    int statelessNumber = a + b;\n    Console.WriteLine(statelessNumber);\n};\n\naddTwo(1, 2);\n</code></pre> <p>Stateful:</p> <pre><code>int statefulNumber;\n\nvoid addMore(int a)\n{\n    statefulNumber = statefulNumber + a;\n    Console.WriteLine(statefulNumber);\n}\n\naddMore(5);\naddMore(5);\n</code></pre> <p></p>"},{"location":"dev/concepts/programming-glossary/#access-modifiers","title":"Access Modifiers","text":"<p>Simple What:</p> <ul> <li>Access modifiers are a popular OOP feature that restrict who can access what of a class.</li> <li>Commonly expressed as <code>public</code>, <code>protected</code>, <code>private</code>, and a few others.</li> </ul> <p></p> <p>Simple Why:</p> <ul> <li>Access modifiers help push code to break less via encapsulation &amp; information hiding.</li> </ul>"},{"location":"dev/concepts/programming/","title":"Programming Concepts","text":""},{"location":"dev/concepts/programming/#programming","title":"Programming","text":"<p>The concept of converting human language into computer output.</p> <p>Programming enables you to be safer, faster, and more consistent.</p> <p>Understanding programming is vital to debugging software and fixing things.</p>"},{"location":"dev/dotnet/aspnet/","title":"ASP.NET Overview","text":""},{"location":"dev/dotnet/aspnet/#aspnet","title":"ASP.NET","text":"<p>.NET's native web framework, allowing .NET to interact with the web.</p> <p>ASP.NET contains many types of projects, such as Web Forms, MVC, and Blazor.</p> <p></p> <p>ASP.NET is a library contained in .NET, although many web framework for .NET exist.</p> <p></p> Official <p>Official links related to ASP.NET</p> Info &amp; Link Notes Documentation Uses newest version if not specified. Download Natively part of .NET License: Framework / Core Framework is proprietary w/ exceptions, Core is MIT Project: Framework / Core"},{"location":"dev/dotnet/dotnet-glossary/","title":".NET Glossary","text":""},{"location":"dev/dotnet/dotnet-glossary/#net-glossary","title":".NET Glossary","text":"<p>Terminology, Lingo, and Clarification for .NET.</p>"},{"location":"dev/dotnet/dotnet-glossary/#var-type--implicitly-typed-local-variables","title":"<code>Var</code> Type / Implicitly Typed Local Variables","text":"<p>Simple Definition:</p> <ul> <li>Sets the variable type to whatever is first assigned.</li> </ul> <p>Simple Why:</p> <ul> <li><code>var x = new MyLongClassName&lt;int&gt;()</code> reads better than<code>MyLongClassName&lt;int&gt; x = new MyLongClassName&lt;int&gt;();</code>.</li> <li>Helps decouple design and write code faster at expense of some legibility if not careful.</li> <li>Read more here.</li> </ul> How Simple <p>Input:</p> <pre><code>var x = 1; // These lines are the same\nint x = 1; // These lines are the same\n\nvar x;     // Error: Need to assign type\n\nvar x = 1;\nx = \"hi\";  // Error: \"hi\" not an int\n</code></pre>"},{"location":"dev/dotnet/dotnet-glossary/#value-type","title":"Value Type","text":"<p>Simple Definition:</p> <ul> <li>A Value Type is a value that directly holds itself in the variable's memory address.</li> <li>In Microsoft's implementation, most built-in types are primitive.<ul> <li>NOTE: Certain uses of value types are treated as references OR converted via \"Boxing\".</li> </ul> </li> <li>They are usually stored on the stack, but this is an implementation detail.</li> </ul> <p>Simple Why:</p> <ul> <li>Space and time efficiency mostly.</li> </ul> <p></p> How Value Type <p>Follow this code and examine <code>i</code>:</p> <pre><code>int i = 0;\nConsole.WriteLine(i);     // i = 0\nChangeValue(i);\nConsole.WriteLine(i);     // i = 0\n\nstatic void ChangeValue(int i)\n{\n    i =  2;\n    Console.WriteLine(i); // i = 2\n}\n</code></pre> <p>For extra points, check it out in the debugger.</p> <p></p> <p>Notice how when we get out of scope, it switches back!</p> <p></p>"},{"location":"dev/dotnet/dotnet-glossary/#reference-type","title":"Reference Type","text":"<p>Simple Definition:</p> <ul> <li>A Reference Type is a value that is accessed by a different memory address.</li> <li>In Microsoft's implementation, strings and most objects are references.<ul> <li>NOTE: Certain uses of value types are treated as references OR converted via \"Boxing\".</li> </ul> </li> <li>They are usually stored on the heap, but this is an implementation detail.</li> </ul> <p>Simple Why:</p> <ul> <li>Allows for fancy garbage collection and other cool stuff.</li> <li>Our stack won't blow up trying to load a massive string / object. It is only 1MB/4MB</li> </ul> <p></p> How Reference TypeImmutable References &amp; <code>ref</code> <p>Objects (like this examples <code>Student</code> class) are references:</p> <pre><code>Student ed = new Student();\ned.studentName = \"Ed\";\nConsole.WriteLine(ed.studentName); // Ed\nChangeReferenceType(ed);\nConsole.WriteLine(ed.studentName); // Not Ed\n\nstatic void ChangeReferenceType(Student student)\n{\n    student.studentName = \"Not Ed\";\n}\n\nclass Student\n{\n    public string studentName;\n}\n</code></pre> <p>Notice how trying to change just the string doesn't change the object!</p> <pre><code>Student ed = new Student();\ned.studentName = \"Ed\";\nConsole.WriteLine(ed.studentName); // Ed\nChangeStringReference(ed.studentName);\nConsole.WriteLine(ed.studentName); // Ed (!)\nChangeClassReference(ed);\nConsole.WriteLine(ed.studentName); // Not Ed\n\nstatic void ChangeStringReference(string studentName)\n{\n    studentName = \"Not Ed\";\n}\n\nstatic void ChangeClassReference(Student student)\n{\n    student.studentName = \"Not Ed\";\n}\n\nclass Student\n{\n    public string studentName;\n}\n</code></pre> <p>So what's going on here?</p> <p>C# Passes-By-Value (in this case, the memory address). Take a look on why object properties vs strings act different:</p> <p></p> <p>Read this for more context.</p> <p>Here's a simplified version of our reference being Passed-By-Value:</p> <pre><code>string s = \"hi!\";\nConsole.WriteLine(s);     // s = \"hi!\"\nChangeValue(s);\nConsole.WriteLine(s);     // s = \"hi!\" ...wait, what?\n\nstatic void ChangeValue(string s)\n{\n    s = \"bye!\";\n    Console.WriteLine(s); // s = \"bye!\"\n}\n</code></pre> <p>If Absolutely Necessary, we can resolve this by using <code>ref</code> which Passes-By-Reference.</p> <pre><code>string s = \"hi!\";\nConsole.WriteLine(s);     // s = \"hi!\"\nChangeValue(ref s);\nConsole.WriteLine(s);     // s = \"bye!\"\n\nstatic void ChangeValue(ref string s)\n{\n    s = \"bye!\";\n    Console.WriteLine(s); // s = \"bye!\"\n}\n</code></pre> <p>Or we can defer to using a mutable object, like StringBuilder:</p> <pre><code>using System.Text;\n\nStringBuilder s = new StringBuilder(\"hi!\");\nConsole.WriteLine(s);     // s = \"hi!\"\nChangeValue(s);\nConsole.WriteLine(s);     // s = \"bye!\"\n\nstatic void ChangeValue(StringBuilder s)\n{\n    s.Clear();\n    s.Append(\"bye!\");\n    Console.WriteLine(s); // s = \"bye!\"\n}\n</code></pre> <p>Apologies if I didn't do well explaining this, its fairly nuanced!</p> <p></p>"},{"location":"dev/dotnet/dotnet-glossary/#boxing--unboxing","title":"Boxing / Unboxing","text":"<p>Simple Definition:</p> <ul> <li>Conversion of a value type to a reference type.</li> <li>This is usually not desired because it eats extra CPU cycles and creates extra objects in memory.</li> <li>It also avoids compile-time checks, which should be avoided if possible.</li> </ul> <p>Simple Why:</p> <ul> <li>Early on, it was difficult to avoid passing a value to an <code>object</code> parameter or non-generic collection.<ul> <li>NOTE: This has been mostly solved with generics and .NET maturity.</li> </ul> </li> </ul> How Boxing Example <p>When passing values to an object parameter:</p> <pre><code>using System.Collections;\n\nArrayList x = new ArrayList();\n\nint myInt = 10;     // Int\nx.Add(myInt);       // Boxing Int -&gt; Object\nint y = (int) x[0]; // Unboxing Object -&gt; Int Explicitly\n</code></pre> <p>In our debugger, we can see this the value -&gt; reference -&gt; value nastiness:</p> <p></p>"},{"location":"dev/dotnet/dotnet-glossary/#consolewriteline","title":"Console.WriteLine","text":"<p>Simple Definition:</p> <ul> <li>Writes to the console &amp; adds a newline.</li> <li>Basically <code>Console.Write</code> with a newline at the end.</li> </ul> <p>Simple Why:</p> <ul> <li><code>Console.WriteLine()</code> beats <code>Console.Write()</code> as you'll usually want to add a return.</li> <li>Allows platform agnostic newlines, since each OS uses different control characters. (1)</li> </ul> <ol> <li>MacOS only uses the <code>return</code> or <code>carriage return</code> character <code>\\r</code>, Linux only uses the <code>newline</code> or <code>line feed</code> character <code>\\n</code>, and Windows uses BOTH <code>\\r\\n</code>.</li> </ol> How SimpleConcatenation vs Formatting vs InterpolationVerbatim &amp; Raw Strings <p>Input:</p> <pre><code>System.Console.WriteLine(\"Hello\");\nSystem.Console.WriteLine(\"World\");\n</code></pre> <p>Output:</p> <p></p><pre><code>Hello\nWorld\n</code></pre> Note: The <code>World</code> will have a newline at the end as well.<p></p> <p>There are a few ways to slam variables into a string, you should know all of them!</p> <p>All 3 ways deliver this output:</p> <p>Output:</p> <pre><code>Ed\nRound 1: 2\nRound 2: 3\nTotal: 5\n</code></pre> <p>Concatenation:</p> <pre><code>string name = \"Ed\";\nint scoreOne = 2;\nint scoreTwo = 3;\nConsole.WriteLine(name + \"\\nRound 1: \" + scoreOne + \"\\nRound 2: \" + scoreTwo + \"\\nTotal: \" + (scoreOne + scoreTwo));\n</code></pre> <p>Composite Formatting:</p> <pre><code>string name = \"Ed\";\nint scoreOne = 2;\nint scoreTwo = 3;\nConsole.WriteLine(\"{0}\\nRound 1: {1}\\nRound 2: {2}\\nTotal: {3}\", name, scoreOne, scoreTwo, (scoreOne + scoreTwo));\n</code></pre> <p>String Interpolation:</p> <pre><code>string name = \"Ed\";\nint scoreOne = 2;\nint scoreTwo = 3;\nConsole.WriteLine($\"{name}\\nRound 1: {scoreOne}\\nRound 2: {scoreTwo}\\nTotal: {scoreOne + scoreTwo}\");\n</code></pre> <p>String interpolation is usually the most expressive &amp; shortest:</p> <p></p> <p>It also works well with verbatim / raw strings!</p> <p>Look, just click this link and pay attention to this picture:</p> <p></p>"},{"location":"dev/dotnet/dotnet/","title":".NET Overview","text":""},{"location":"dev/dotnet/dotnet/#net","title":".NET","text":"<p>Microsoft's official framework for languages targeting the CIL specification.</p> <p>.NET compiles C# (and others) to IL, links to included .NET Libraries, and runs via JIT compilation.</p> <p></p> <p>.NET ships with a large amount of libraries that are heavily associated with C# (Although usable in other CIL languages)</p> <p></p> Official <p>Official links related to .NET</p> Info &amp; Link Notes Documentation: Framework / Core Downloads: Framework / Core License: Framework / Core Project Home: Framework / Core Related Topics Topic Why Visual Studio Primary Dev Tool for C#"},{"location":"it/networking/networking/","title":"Overview","text":""},{"location":"it/networking/networking/#networking","title":"networking","text":"<p>Networking connects computers to other computers.</p> <p>This concept enables things like the Internet to exist.</p> <p></p>"},{"location":"archive/2025/","title":"2025","text":""},{"location":"archive/2025/#2025","title":"2025","text":""},{"location":"archive/2023/","title":"2023","text":""},{"location":"archive/2023/#2023","title":"2023","text":""}]}